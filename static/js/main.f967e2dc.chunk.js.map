{"version":3,"sources":["styles/theme.ts","styles/index.ts","components/styled-components/index.js","components/number-input/style.ts","components/number-input/index.tsx","pages/components/total-rounds/index.tsx","components/time-input/style.ts","components/time-input/index.tsx","pages/components/round-time/index.tsx","pages/components/interval/index.tsx","store/round-manager/types.ts","store/round-manager/actions.ts","pages/configure-rounds-page/index.tsx","pages/start-round-count/index.tsx","App.tsx","serviceWorker.ts","store/round-manager/reducer.ts","store/round-manager/sagas.ts","store/index.ts","index.tsx"],"names":["Theme","colors","main","mainDark","text","createGlobalStyle","theme","Label","styled","div","InputContainer","Container","Board","StyledInput","input","NumberInput","props","useState","value","internalValue","setInternalValue","inputRef","useRef","useEffect","pattern","ref","onFocus","current","classList","add","placeholder","onFocusCallback","onBlur","remove","result","onChangeText","onBlurCallback","onChange","event","formatedNumber","String","Number","target","replace","TotalRounds","rounds","NumberContainer","Dots","TimeInput","minutes","seconds","onChangeTime","inEdition","setInEdition","onFocusHandler","onBlurHandler","validateValue","isNaN","console","log","tmpMinutes","className","tmpSeconds","RoundTime","setRoundTime","Interval","setInterval","ROUND_MANAGER_SET_ROUNDS","ROUND_MANAGER_SET_ROUND_TIME","ROUND_MANAGER_SET_INTERVAL","ROUND_MANAGER_SET_CURRENT_TIME","ROUND_MANAGER_SET_CURRENT_ROUND","ROUND_MANAGER_SET_CURRENT_INTERVAL","ROUND_MANAGER_START_ASYNC","ROUND_MANAGER_START","setCurrentRound","currentRound","type","payload","setCurrentTime","currentTime","setRoundInterval","interval","setRounds","roundTime","startAsync","start","setCurrentInterval","ConfigureRoundsPage","dispatch","useDispatch","setTotalRounds","useCallback","setRoundTimeHandler","setRoundIntervalHandler","startHandler","useSelector","state","rouds","Math","trunc","onClick","currentInterval","App","Boolean","window","location","hostname","match","InitialState","started","actionsStrategy","startRound","roundsManager","roundStart","intervalStart","select","put","call","delay","takeLatest","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","action","store","middlewares","middelwareEnhancer","applyMiddleware","createStore","composeWithDevTools","run","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f967e2dc.chunk.js","sourcesContent":["import { DefaultTheme } from 'styled-components';\n\nconst Theme: DefaultTheme = {\n  colors: {\n    main: '#7A99FF',\n    mainDark: '#5C73BF',\n    text: '#1F2640',\n  },\n}\n\nexport { Theme };\n","import {createGlobalStyle} from 'styled-components';\n\nexport default createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap');\n\n  * {\n    padding: 0;\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: antialiased;\n  }\n\n  body, #root {\n    font-family: 'Roboto', sans-serifri;\n    font-size: 16px;\n    font-weight: 400;\n    height: 100%;\n    color: ${({theme}) => theme.colors.text};\n  }\n\n  body {\n    background-image: ${({ theme }) => `linear-gradient(${theme.colors.main}, ${theme.colors.mainDark})`};\n  }\n\n  @keyframes blink {\n    0% { opacity: 0;}\n    50% { opacity: 1;}\n    100% { opacity: 0;}\n  }\n\n  .blink {\n    animation: blink 0.7s infinite;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Label = styled.div`\n  font-weight: 600;\n  font-size: 2rem;\n  text-align: center;\n  color: ${({theme}) => theme.colors.text};\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 25px;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n`;\n\nexport const Board = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  height: 80vh;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 0px 20px 0 rgba(0,0,0,0.1);\n`;\n","import styled from 'styled-components';\nexport const StyledInput = styled.input`\n  border: none;\n  background: inherit;\n  font-size: 3rem;\n  font-weight: 600;\n  text-align: center;\n  color: ${({theme}) => theme.colors.text};\n  width: 100%;\n  direction: rtl;\n`;\n\n\n","import React, {useRef, useState, useEffect} from 'react';\n\nimport { StyledInput} from './style';\n\ninterface Props {\n  value: string;\n  placeholder: string;\n  onChangeText(text: string):void;\n  onFocusCallback?():void;\n  onBlurCallback?():void;\n}\n\nconst NumberInput: React.FC<Props> = (props:Props) =>{\n  const [internalValue, setInternalValue] = useState(props.value);\n  const inputRef: React.RefObject<HTMLInputElement> = useRef(null);\n\n  useEffect(() => {\n    setInternalValue(props.value);\n  }, [props.value]);\n\n  const focusHandle = () => {\n    if(inputRef.current){\n      inputRef.current.classList.add('blink');\n      inputRef.current.placeholder=internalValue;\n      setInternalValue('');\n\n      if(props.onFocusCallback){\n        props.onFocusCallback();\n      }\n    }\n  }\n\n  const blurHandle = () => {\n    if(inputRef.current){\n      inputRef.current.classList.remove('blink');\n\n      const result = internalValue ? internalValue : props.value;\n      setInternalValue(result);\n      props.onChangeText(result);\n\n      if(props.onBlurCallback)\n        props.onBlurCallback();\n    }\n  }\n\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>):void =>{\n    const formatedNumber= String(Number(event.target.value.replace(/[^\\d]/,'')));\n    setInternalValue(formatedNumber);\n  }\n\n  return(\n    <StyledInput\n      pattern=\"[0-9]*\"\n      ref={inputRef}\n      onFocus={focusHandle}\n      onBlur={blurHandle}\n      onChange={onChangeHandler}\n      value={internalValue}\n      placeholder={props.placeholder}/>\n  );\n}\n\nexport default NumberInput;\n","import React from 'react';\n\nimport { InputContainer, Label} from '../../../components/styled-components';\nimport NumberInput from '../../../components/number-input';\nimport { placeholder } from '@babel/types';\n\ninterface Props {\n  onBlurCallback?():void,\n  onFocusCallback?():void,\n  onChangeText(text:string):void\n  placeholder:string,\n  rounds: number,\n};\n\nexport const TotalRounds: React.FC<Props> = (props:Props) => {\n\n  function onBlurHandler():void {\n    if(props.onBlurCallback)\n      props.onBlurCallback();\n  }\n\n  function onFocusHandler():void{\n    if(props.onFocusCallback)\n      props.onFocusCallback();\n  }\n\n  return (\n    <InputContainer>\n      <Label>Número de rounds</Label>\n      <NumberInput\n        onBlurCallback={onBlurHandler}\n        onFocusCallback={onFocusHandler}\n        onChangeText={text => props.onChangeText(text)}\n        placeholder={props.placeholder}\n        value={String(props.rounds)}\n      />\n    </InputContainer>\n  );\n}\n\nexport default TotalRounds;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 150px;\n`;\n\nexport const NumberContainer = styled.div`\n  display: flex;\n  flex: 4;\n`;\n\nexport const Dots = styled.div`\n  flex: 1;\n  text-align: center;\n  font-weight: 600;\n  font-size: 2rem;\n`;\n\nexport const StyledInput = styled.input`\n  border: none;\n  background: inherit;\n  font-size: 3rem;\n  font-weight: 600;\n  text-align: center;\n  color: ${({theme}) => theme.colors.text};\n  width: 100%;\n  direction: rtl;\n`;\n\n\n","import React, {useState, useEffect, useRef, SyntheticEvent} from 'react';\n\nimport { Container, Dots, NumberContainer, StyledInput} from './style';\nimport NumberInput from '../number-input';\n\nconst MaxValue:number = 59;\ninterface Props {\n  minutes: number,\n  seconds: number,\n  onChangeTime(value:number):void\n}\n\nconst TimeInput: React.FC<Props> = ({minutes, seconds, onChangeTime}) =>{\n\n  const [inEdition, setInEdition] = useState(false);\n\n  const onFocusHandler = ():void => {\n    setInEdition(true);\n  };\n\n  const onBlurHandler = ():void => {\n      setInEdition(false);\n  };\n\n  const validateValue = (value:string): number=> {\n    let result = Number(value);\n    if(Number.isNaN(result))\n      return 0;\n\n    if(result > MaxValue)\n     result = MaxValue\n\n    return result;\n  }\n\n  const setSecondsHandler = (value: string):void => {\n    const tmpSeconds = validateValue(value);\n    const minutesToSeconds = minutes * 60;\n    onChangeTime(minutesToSeconds + tmpSeconds);\n  }\n\n  const setMinutesHandler = (value: string):void => {\n    const tmpMinutes = validateValue(value) * 60;\n    onChangeTime(tmpMinutes + seconds);\n  }\n\n  console.log(minutes, seconds, '<==')\n\n  return(\n    <Container>\n      <NumberContainer>\n        <NumberInput\n          value={String(minutes)}\n          placeholder=\"00\"\n          onBlurCallback={onBlurHandler}\n          onFocusCallback={onFocusHandler}\n          onChangeText={setMinutesHandler}\n        />\n      </NumberContainer>\n      <Dots className={inEdition? '': 'blink'}>:</Dots>\n      <NumberContainer>\n        <NumberInput\n          value={String(seconds)}\n          placeholder=\"00\"\n          onBlurCallback={onBlurHandler}\n          onFocusCallback={onFocusHandler}\n          onChangeText={setSecondsHandler}\n        />\n      </NumberContainer>\n    </Container>\n  );\n}\n\nexport default TimeInput;\n","import React from 'react';\n\nimport { InputContainer, Label} from '../../../components/styled-components';\nimport TimeInput from '../../../components/time-input';\n\ninterface Props {\n  minutes: number,\n  seconds: number,\n  setRoundTime(seconds: number):void,\n};\n\nconst RoundTime : React.FC<Props> = (props:Props) => {\n  return (\n    <InputContainer>\n        <Label>Duração do round</Label>\n        <TimeInput\n          minutes={props.minutes}\n          seconds={props.seconds}\n          onChangeTime={(value:number) => props.setRoundTime(value)}/>\n    </InputContainer>\n  );\n}\n\nexport default RoundTime;\n","import React from 'react';\n\nimport { InputContainer, Label} from '../../../components/styled-components';\nimport TimeInput from '../../../components/time-input';\n\ninterface Props {\n  minutes: number,\n  seconds: number,\n  setInterval(seconds: number):void,\n};\n\nconst Interval : React.FC<Props> = (props:Props) => {\n  return (\n    <InputContainer>\n        <Label>Intervalo entre rounds</Label>\n        <TimeInput\n          minutes={props.minutes }\n          seconds={props.seconds}\n          onChangeTime={props.setInterval} />\n    </InputContainer>\n  );\n}\n\nexport default Interval;\n","export const ROUND_MANAGER_SET_ROUNDS = 'ROUND_MANAGER_SET_ROUNDS';\nexport const ROUND_MANAGER_SET_ROUND_TIME = 'ROUND_MANAGER_SET_ROUND_TIME';\nexport const ROUND_MANAGER_SET_INTERVAL = 'ROUND_MANAGER_SET_INTERVAL';\nexport const ROUND_MANAGER_SET_CURRENT_TIME = 'ROUND_MANAGER_SET_CURRENT_TIME';\nexport const ROUND_MANAGER_SET_CURRENT_ROUND = 'ROUND_MANAGER_SET_CURRENT_ROUND';\nexport const ROUND_MANAGER_SET_CURRENT_INTERVAL= 'ROUND_MANAGER_SET_CURRENT_INTERVAL';\nexport const ROUND_MANAGER_START_ASYNC = 'ROUND_MANAGER_START_ASYNC';\nexport const ROUND_MANAGER_STOP_ASYNC = 'ROUND_MANAGER_STOP_ASYNC';\nexport const ROUND_MANAGER_START = 'ROUND_MANAGER_START';\n\ninterface setRounds {\n  type: typeof ROUND_MANAGER_SET_ROUNDS,\n  payload: {rounds: number},\n}\n\ninterface setRoundTime {\n  type: typeof ROUND_MANAGER_SET_ROUND_TIME,\n  payload: {roundTime: number},\n};\n\ninterface setRoundInterval {\n  type: typeof ROUND_MANAGER_SET_INTERVAL,\n  payload: {interval: number},\n};\n\ninterface setCurrentTime {\n  type: typeof ROUND_MANAGER_SET_CURRENT_TIME,\n  payload: {currentTime: number},\n}\n\ninterface setCurrentRound {\n  type: typeof ROUND_MANAGER_SET_CURRENT_ROUND,\n  payload: {currentRound: number},\n};\n\ninterface startAsync{\n  type: typeof ROUND_MANAGER_START_ASYNC,\n  payload:{},\n};\n\ninterface stopAsync{\n  type: typeof ROUND_MANAGER_STOP_ASYNC,\n  payload:{},\n};\n\ninterface start {\n  type: typeof ROUND_MANAGER_START,\n  payload:{\n    interval: number,\n    rounds: number,\n    roundTime: number\n  },\n}\n\ninterface setCurrentInterval {\n  type: typeof ROUND_MANAGER_SET_CURRENT_INTERVAL,\n  payload:{interval: number}\n}\n\nexport type roundManagerTypes = setCurrentRound\n| setCurrentTime\n| setRoundTime\n| setRoundInterval\n| setRounds\n| setCurrentInterval\n| start;\n\nexport type roundManagerSagaTypers = startAsync | stopAsync;\n\n","import {\n  ROUND_MANAGER_SET_CURRENT_ROUND,\n  ROUND_MANAGER_SET_CURRENT_TIME,\n  ROUND_MANAGER_SET_INTERVAL,\n  ROUND_MANAGER_SET_ROUNDS,\n  ROUND_MANAGER_SET_ROUND_TIME,\n  ROUND_MANAGER_START,\n  ROUND_MANAGER_SET_CURRENT_INTERVAL,\n  roundManagerTypes,\n  roundManagerSagaTypers,\n  ROUND_MANAGER_START_ASYNC,\n  ROUND_MANAGER_STOP_ASYNC,\n} from './types';\n\nexport function setCurrentRound(currentRound: number) : roundManagerTypes {\n  return {\n    type: ROUND_MANAGER_SET_CURRENT_ROUND,\n    payload: {currentRound}\n  };\n}\n\nexport function setCurrentTime(currentTime: number): roundManagerTypes {\n  return  {\n    type: ROUND_MANAGER_SET_CURRENT_TIME,\n    payload: {currentTime}\n  };\n}\n\nexport function setRoundInterval(interval: number ): roundManagerTypes {\n  return  {\n    type: ROUND_MANAGER_SET_INTERVAL,\n    payload: {interval},\n  }\n}\n\nexport function setRounds(rounds: number):  roundManagerTypes {\n  return {\n    type: ROUND_MANAGER_SET_ROUNDS,\n    payload: {rounds}\n  }\n}\n\nexport function setRoundTime(roundTime: number): roundManagerTypes {\n  return {\n    type: ROUND_MANAGER_SET_ROUND_TIME,\n    payload: {roundTime}\n  }\n}\n\nexport function startAsync(): roundManagerSagaTypers {\n  return {\n    type: ROUND_MANAGER_START_ASYNC,\n    payload: {},\n  }\n}\n\nexport function stopAsync(): roundManagerSagaTypers {\n  return {\n    type: ROUND_MANAGER_STOP_ASYNC,\n    payload:{},\n  }\n}\n\nexport function start(rounds: number, roundTime: number, interval: number): roundManagerTypes {\n  return {\n    type: ROUND_MANAGER_START,\n    payload: {rounds, roundTime, interval}\n  }\n}\n\nexport function setCurrentInterval(interval: number) : roundManagerTypes {\n  return {\n    type: ROUND_MANAGER_SET_CURRENT_INTERVAL,\n    payload:{interval}\n  }\n}\n","import React, {useCallback} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {\n  Board,\n  Container,\n} from '../../components/styled-components';\nimport TotalRounds from '../components/total-rounds';\nimport RoundTime from '../components/round-time';\nimport Interval from '../components/interval';\nimport { AppState } from '../../store';\nimport {setRounds, setRoundTime, setRoundInterval, startAsync, stopAsync} from '../../store/round-manager/actions';\n\nexport const ConfigureRoundsPage: React.FC = () => {\n  const dispatch = useDispatch();\n  const setTotalRounds = useCallback(\n    (text:string) => dispatch(setRounds(Number(text))),[]);\n\n  const setRoundTimeHandler = useCallback(\n    (value:number) => dispatch(setRoundTime(value)),[]);\n\n  const setRoundIntervalHandler = useCallback(\n    (value: number) => dispatch(setRoundInterval(value)),[]\n  );\n\n  const startHandler = useCallback(\n    () => dispatch(startAsync()),[]\n  );\n\n  const { rounds, roundTime, interval } = useSelector( (state: AppState) => state.rouds);\n\n  return (\n    <Container>\n      <Board>\n        <TotalRounds\n          onChangeText={setTotalRounds}\n          placeholder=\"0\"\n          rounds={rounds} />\n        <RoundTime\n          minutes={Math.trunc(roundTime / 60)}\n          seconds={roundTime % 60}\n          setRoundTime={setRoundTimeHandler}/>\n        <Interval\n          minutes={Math.trunc(interval / 60)}\n          seconds={interval % 60}\n          setInterval={setRoundIntervalHandler}\n        />\n        <button onClick={startHandler}>Start</button>\n      </Board>\n    </Container>\n  );\n}\n\nexport default ConfigureRoundsPage;\n","import React, {useCallback} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {\n  Board,\n  Container,\n} from '../../components/styled-components';\nimport TotalRounds from '../components/total-rounds';\nimport RoundTime from '../components/round-time';\nimport Interval from '../components/interval';\nimport { AppState } from '../../store';\nimport {setRounds, setRoundTime, setRoundInterval, startAsync, stopAsync} from '../../store/round-manager/actions';\n\nexport const ConfigureRoundsPage: React.FC = () => {\n  const dispatch = useDispatch();\n  const setTotalRounds = useCallback(\n    (text:string) => dispatch(setRounds(Number(text))),[]);\n\n  const setRoundTimeHandler = useCallback(\n    (value:number) => dispatch(setRoundTime(value)),[]);\n\n  const setRoundIntervalHandler = useCallback(\n    (value: number) => dispatch(setRoundInterval(value)),[]\n  );\n\n  const startHandler = useCallback(\n    () => dispatch(startAsync()),[]\n  );\n\n  const { currentTime, currentRound, currentInterval } = useSelector( (state: AppState) => state.rouds);\n\n  return (\n    <Container>\n      <Board>\n        <TotalRounds\n          onChangeText={setTotalRounds}\n          placeholder=\"0\"\n          rounds={currentRound} />\n        <RoundTime\n          minutes={Math.trunc(currentTime/ 60)}\n          seconds={currentTime% 60}\n          setRoundTime={setRoundTimeHandler}/>\n        <Interval\n          minutes={Math.trunc(currentInterval/ 60)}\n          seconds={currentInterval % 60}\n          setInterval={setRoundIntervalHandler}\n        />\n        <button onClick={startHandler}>Start</button>\n      </Board>\n    </Container>\n  );\n}\n\nexport default ConfigureRoundsPage;\n","import React from 'react';\nimport {ThemeProvider} from 'styled-components';\nimport {Theme} from './styles/theme';\n\nimport GlobalStyle from './styles';\nimport ConfigureRoundsPage from './pages/configure-rounds-page';\nimport StartRoundCount from './pages/start-round-count';\n\nconst App: React.FC = () => {\n  return (\n  <ThemeProvider theme={Theme}>\n    <>\n      <GlobalStyle />\n      <ConfigureRoundsPage />\n      <StartRoundCount />\n    </>\n  </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  ROUND_MANAGER_SET_CURRENT_ROUND,\n  ROUND_MANAGER_SET_CURRENT_TIME,\n  ROUND_MANAGER_SET_INTERVAL,\n  ROUND_MANAGER_SET_ROUNDS,\n  ROUND_MANAGER_SET_ROUND_TIME,\n  ROUND_MANAGER_SET_CURRENT_INTERVAL,\n  ROUND_MANAGER_START,\n  roundManagerTypes\n} from './types';\n\nimport {Round} from './model';\n\nconst InitialState: Round = {\n  currentRound: 0,\n  currentTime: 0,\n  interval: 0,\n  roundTime: 0,\n  rounds: 0,\n  currentInterval: 0,\n  started: false,\n};\n\nfunction setCurrentRound(state: Round, payload: any) :Round {\n  return {...state, currentRound: payload.currentRound};\n}\n\nfunction setCurrentTime(state: Round, payload: any) :Round {\n  return {...state, currentTime: payload.currentTime};\n}\n\nfunction setCurrentInterval(state: Round, payload: any) :Round {\n  return {...state, currentInterval: payload.interval};\n}\n\nfunction setRoundInterval(state: Round, payload: any) :Round {\n  return {...state, interval: payload.interval};\n}\n\nfunction setRounds(state: Round, payload: any) :Round {\n  return {...state, rounds: payload.rounds};\n}\n\nfunction setRoundTime(state: Round, payload: any) :Round {\n  return {...state, roundTime: payload.roundTime};\n}\n\nfunction start(state: Round, payload: any): Round {\n  console.log(state, payload)\n  return {\n    ...state,\n    currentInterval: payload.interval,\n    currentRound: payload.rounds,\n    currentTime: payload.roundTime }\n}\n\nconst actionsStrategy = {\n  [ROUND_MANAGER_SET_CURRENT_ROUND] : setCurrentRound,\n  [ROUND_MANAGER_SET_CURRENT_TIME] : setCurrentTime,\n  [ROUND_MANAGER_SET_INTERVAL] : setRoundInterval,\n  [ROUND_MANAGER_SET_ROUNDS] : setRounds,\n  [ROUND_MANAGER_SET_ROUND_TIME] : setRoundTime,\n  [ROUND_MANAGER_START] : start,\n  [ROUND_MANAGER_SET_CURRENT_INTERVAL] : setCurrentInterval,\n}\n\nexport function roundManagerReducer(state = InitialState, action: roundManagerTypes) : Round {\n  if(!actionsStrategy[action.type]) return state;\n\n  return actionsStrategy[action.type](state, action.payload);\n}\n","import {takeLatest,put, delay, select, call} from 'redux-saga/effects';\n\nimport { ROUND_MANAGER_START_ASYNC} from './types';\nimport {AppState} from '../index';\nimport { setCurrentRound, start, setCurrentTime, setCurrentInterval} from './actions';\n\nfunction* startRound() {\n  const {\n    rounds,\n    roundTime,\n    interval\n  } = yield select((state: AppState) => state.rouds);\n\n  yield put(start(rounds, roundTime, interval));\n  yield call(roundsManager);\n}\n\nfunction* roundsManager() {\n  let currentRound = yield select((state: AppState) => state.rouds.currentRound);\n\n  while(currentRound > 0){\n    yield call(roundStart);\n    yield put(setCurrentRound(currentRound - 1));\n    currentRound = yield select((state: AppState) => state.rouds.currentRound);\n  }\n\n}\n\nfunction* roundStart() {\n  const {roundTime} = yield select((state:AppState) => state.rouds);\n  let currentTime= yield select((state: AppState) => state.rouds.currentTime);\n  while(currentTime> 1){\n    currentTime= yield select((state: AppState) => state.rouds.currentTime);\n    yield put(setCurrentTime(currentTime- 1));\n    yield delay(1000);\n  }\n\n  yield put(setCurrentTime(roundTime));\n  yield call(intervalStart);\n}\n\nfunction* intervalStart() {\n  const {interval} = yield select((state:AppState) => state.rouds);\n  let currentInterval = yield select((state: AppState) => state.rouds.currentInterval);\n  while(currentInterval > 1){\n    currentInterval = yield select((state: AppState) => state.rouds.currentInterval);\n    yield put(setCurrentInterval(currentInterval- 1));\n    yield delay(1000);\n  }\n  yield put(setCurrentInterval(interval));\n}\n\nexport function* startHandler(){\n  yield takeLatest(ROUND_MANAGER_START_ASYNC, startRound);\n}\n","import {createStore, combineReducers, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport {all} from 'redux-saga/effects';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport { roundManagerReducer } from './round-manager/reducer';\n\nimport {startHandler} from './round-manager/sagas';\n\nconst sagaMiddleware  = createSagaMiddleware();\n\nconst rootReducer = combineReducers({\n  rouds: roundManagerReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default function configureStore(){\n  const middlewares = [sagaMiddleware];\n  const middelwareEnhancer = applyMiddleware(...middlewares);\n\n  const store = createStore(rootReducer, composeWithDevTools(middelwareEnhancer));\n\n  sagaMiddleware.run(startHandler);\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nimport configureStore from './store';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}